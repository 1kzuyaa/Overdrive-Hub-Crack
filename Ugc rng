local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local Humanoid = Character:WaitForChild("Humanoid")
local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")

local VISITED = {}
local FAILED_TARGETS = {}

-- Noclip setup
RunService.Stepped:Connect(function()
	for _, part in pairs(Character:GetDescendants()) do
		if part:IsA("BasePart") then
			part.CanCollide = false
		end
	end
end)

-- Swimming setup
local swimVelocity = Instance.new("BodyVelocity")
swimVelocity.MaxForce = Vector3.new(0, math.huge, 0)
swimVelocity.Velocity = Vector3.new(0, 0, 0)
swimVelocity.Parent = HumanoidRootPart

local movingUp, movingDown = false, false

local function updateSwimVelocity()
	if movingUp and not movingDown then
		swimVelocity.Velocity = Vector3.new(0, 50, 0)
	elseif movingDown and not movingUp then
		swimVelocity.Velocity = Vector3.new(0, -50, 0)
	else
		swimVelocity.Velocity = Vector3.new(0, 0, 0)
	end
end

UserInputService.InputBegan:Connect(function(input, gameProcessed)
	if gameProcessed then return end
	if input.KeyCode == Enum.KeyCode.Space then
		movingUp = true
	elseif input.KeyCode == Enum.KeyCode.LeftShift then
		movingDown = true
	end
	updateSwimVelocity()
end)

UserInputService.InputEnded:Connect(function(input)
	if input.KeyCode == Enum.KeyCode.Space then
		movingUp = false
	elseif input.KeyCode == Enum.KeyCode.LeftShift then
		movingDown = false
	end
	updateSwimVelocity()
end)

RunService.Stepped:Connect(function()
	if Humanoid and Humanoid.Health > 0 then
		if Humanoid:GetState() ~= Enum.HumanoidStateType.Swimming then
			Humanoid:ChangeState(Enum.HumanoidStateType.Swimming)
		end
	end
end)

-- Check if part is grouped
local function isGrouped(part)
	local count = 0
	for _, other in pairs(workspace:GetDescendants()) do
		if other:IsA("MeshPart") and (other.Name == "gold" or other.Name == "pink" or other.Name == "blue") and other ~= part then
			if (part.Position - other.Position).Magnitude <= 2.5 then
				count += 1
			end
		end
	end
	return count >= 2
end

-- Get all valid parts grouped by priority
local function getValidPartsByPriority()
	local priorities = {gold = {}, pink = {}, blue = {}}
	for _, part in pairs(workspace:GetDescendants()) do
		if part:IsA("MeshPart") and priorities[part.Name] then
			if not VISITED[part] and not FAILED_TARGETS[part] and not isGrouped(part) then
				table.insert(priorities[part.Name], part)
			end
		end
	end
	return priorities
end

-- Get closest part from a list
local function getClosestFromList(pos, list)
	if #list == 0 then return nil end
	table.sort(list, function(a, b)
		return (a.Position - pos).Magnitude < (b.Position - pos).Magnitude
	end)
	return list[1]
end

-- Get closest part among all priorities (with priority weights)
local function getBestTarget(currentPos, priorities)
	local closestParts = {
		gold = getClosestFromList(currentPos, priorities.gold),
		pink = getClosestFromList(currentPos, priorities.pink),
		blue = getClosestFromList(currentPos, priorities.blue),
	}

	local bestPart = nil
	local bestDistance = math.huge
	local bestPriority = math.huge -- lower is better: gold=1, pink=2, blue=3

	for name, part in pairs(closestParts) do
		if part then
			local distance = (part.Position - currentPos).Magnitude
			local priorityValue = (name == "gold" and 1) or (name == "pink" and 2) or 3
			if distance < bestDistance or (distance == bestDistance and priorityValue < bestPriority) then
				bestDistance = distance
				bestPriority = priorityValue
				bestPart = part
			end
		end
	end

	return bestPart
end

-- Teleport beside part
local function teleportToSideOfPart(target)
	local offsetDistance = 5
	local sidePosition = target.CFrame * CFrame.new(offsetDistance, 0, 0)
	HumanoidRootPart.CFrame = sidePosition
end

-- Tween to position
local function tweenToPosition(targetCFrame, duration)
	local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Linear, Enum.EasingDirection.Out)
	local tween = TweenService:Create(HumanoidRootPart, tweenInfo, {CFrame = targetCFrame})
	tween:Play()
	tween.Completed:Wait()
end

-- Main logic loop
coroutine.wrap(function()
	while true do
		local priorities = getValidPartsByPriority()
		local target = getBestTarget(HumanoidRootPart.Position, priorities)

		if target then
			VISITED[target] = true

			teleportToSideOfPart(target)
			wait(4) -- Wait before tweening

			local dist = (HumanoidRootPart.Position - target.Position).Magnitude
			if dist > 3 then
				tweenToPosition(target.CFrame, 1.5)
				wait(2)
			else
				wait(2)
			end
		else
			wait(1)
		end
	end
end)()
