local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local Humanoid = Character:WaitForChild("Humanoid")
local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")

local VISITED = {}
local FAILED_TARGETS = {}

-- Noclip setup
local function noclip()
    RunService.Stepped:Connect(function()
        for _, part in pairs(Character:GetDescendants()) do
            if part:IsA("BasePart") and part.CanCollide then
                part.CanCollide = false
            end
        end
    end)
end
noclip()

-- Swimming setup
local swimVelocity = Instance.new("BodyVelocity")
swimVelocity.MaxForce = Vector3.new(0, math.huge, 0)
swimVelocity.Velocity = Vector3.new(0, 0, 0)
swimVelocity.Parent = HumanoidRootPart

local movingUp, movingDown = false, false

local function updateSwimVelocity()
    if movingUp and not movingDown then
        swimVelocity.Velocity = Vector3.new(0, 50, 0)
    elseif movingDown and not movingUp then
        swimVelocity.Velocity = Vector3.new(0, -50, 0)
    else
        swimVelocity.Velocity = Vector3.new(0, 0, 0)
    end
end

UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if input.KeyCode == Enum.KeyCode.Space then
        movingUp = true
        updateSwimVelocity()
    elseif input.KeyCode == Enum.KeyCode.LeftShift then
        movingDown = true
        updateSwimVelocity()
    end
end)

UserInputService.InputEnded:Connect(function(input)
    if input.KeyCode == Enum.KeyCode.Space then
        movingUp = false
        updateSwimVelocity()
    elseif input.KeyCode == Enum.KeyCode.LeftShift then
        movingDown = false
        updateSwimVelocity()
    end
end)

RunService.Stepped:Connect(function()
    if Humanoid and Humanoid.Health > 0 then
        if Humanoid:GetState() ~= Enum.HumanoidStateType.Swimming then
            Humanoid:ChangeState(Enum.HumanoidStateType.Swimming)
        end
    end
end)

-- Check if part is grouped
local function isGrouped(part)
    local count = 0
    for _, other in pairs(workspace:GetDescendants()) do
        if other:IsA("MeshPart") and (other.Name == "pink" or other.Name == "blue") and other ~= part then
            if (part.Position - other.Position).Magnitude <= 2.5 then
                count += 1
            end
        end
    end
    return count >= 2
end

-- Get valid parts
local function getValidParts()
    local parts = {}
    for _, part in pairs(workspace:GetDescendants()) do
        if part:IsA("MeshPart") and (part.Name == "pink" or part.Name == "blue") and not VISITED[part] and not FAILED_TARGETS[part] then
            if not isGrouped(part) then
                table.insert(parts, part)
            end
        end
    end
    return parts
end

-- Closest part
local function getClosestPart(currentPos, parts)
    table.sort(parts, function(a, b)
        return (a.Position - currentPos).Magnitude < (b.Position - currentPos).Magnitude
    end)
    return parts[1]
end

-- Teleport beside
local function teleportToSideOfPart(target)
    local offsetDistance = 5
    local sidePosition = target.CFrame * CFrame.new(offsetDistance, 0, 0)
    HumanoidRootPart.CFrame = sidePosition
end

-- Tween to center
local function tweenToPosition(targetCFrame, duration)
    local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Linear, Enum.EasingDirection.Out)
    local tween = TweenService:Create(HumanoidRootPart, tweenInfo, {CFrame = targetCFrame})
    tween:Play()
    tween.Completed:Wait()
end

-- Main loop
coroutine.wrap(function()
    while true do
        local parts = getValidParts()
        if #parts == 0 then
            wait(1)
            continue
        end

        local target = getClosestPart(HumanoidRootPart.Position, parts)
        if target then
            VISITED[target] = true

            teleportToSideOfPart(target)
            wait(3)

            local distToTarget = (HumanoidRootPart.Position - target.Position).Magnitude
            if distToTarget > 3 then
                tweenToPosition(target.CFrame, 1.5)
                wait(2)
            else
                wait(2)
            end
        else
            wait(1)
        end
    end
end)()
